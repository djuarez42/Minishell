# Test cases for command line testing - Shell Command Explanations

# Test 1: env_print - Environment variable handling
# export: Sets environment variable FOO to value "bar"
# env: Displays all environment variables
# grep: Filters output to show only lines starting with "FOO="
export FOO=bar
env | grep '^FOO='

# Test 2: cd_and_pwd - Directory navigation and PWD tracking
# pwd: Prints current working directory
# mkdir -p: Creates directory "sub" (and parent dirs if needed)
# cd: Changes current directory to "sub"
# pwd: Prints new current working directory
pwd
mkdir -p sub
cd sub
pwd

# Test 3: missing_cmd - Command not found error handling
# no_such_cmd: Attempts to run non-existent command
# Should produce "command not found" error message
no_such_cmd arg1

# Test 4: echo_n - Echo without newline
# echo -n: Prints text without trailing newline
# printf: Prints "<END>" with newline to show where echo output ends
echo -n "no-newline"
printf "<END>\n"

# Test 5: cd_missing - CD without arguments
# cd: With no arguments, should change to HOME directory
# Tests default behavior of cd builtin
cd

# Test 6: export_unset - Variable lifecycle
# export: Sets TEST_VAR environment variable
# echo: Displays variable value (should show "value")
# unset: Removes variable from environment
# echo: Displays variable value again (should be empty)
export TEST_VAR=value
echo $TEST_VAR
unset TEST_VAR
echo $TEST_VAR

# Test 7: export_name_only - Export without assignment
# export NAME_ONLY: Marks variable for export (without assigning value)
# env | grep: Checks if variable appears in environment
export NAME_ONLY
env | grep '^NAME_ONLY'

# Test 8: unset_invalid - Unset with command chaining
# unset FOO; echo $FOO: Two commands separated by semicolon
# unset: Removes FOO variable
# echo: Displays FOO value (should be empty after unset)
# Tests semicolon command separator parsing
unset FOO; echo $FOO