Minishell — Signals Implementation Notes and Tests (Text)

Overview
--------
This file explains the implemented signals behavior, the involved files and functions,
and provides manual test commands to verify compliance with the subject:

  • Handle ctrl-C, ctrl-D and ctrl-\ like bash
  • In interactive mode:
      - ctrl-C displays a new prompt on a new line
      - ctrl-D exits the shell
      - ctrl-\ does nothing


Files and Functions
-------------------
1) include/signals.h
   - Public API for parent-side signal setup/teardown
     • void signals_setup_interactive(t_exec_state *state);
     • void signals_teardown_interactive(void);

2) src/signals/signals.c
   - Parent handlers and termios management
     • static void set_echoctl(bool enable)
       - Disables ECHOCTL in interactive mode to avoid ^C/^\ echoes
     • static void sigint_handler(int signo)
       - Prints a newline, resets readline state (rl_on_new_line, rl_replace_line, rl_redisplay)
       - Sets last status (130) via the stored t_exec_state pointer
     • void signals_setup_interactive(t_exec_state *state)
       - Saves original termios, disables ECHOCTL, installs SIGINT handler, ignores SIGQUIT
       - Sets rl_catch_signals = 0 to ensure readline does not override behavior
     • void signals_teardown_interactive(void)
       - Restores original termios on exit

3) main.c (integration)
   - Before loop (interactive): signals_setup_interactive(&state)
   - On EOF at prompt (ctrl-D): print "exit" and terminate the loop
   - After loop (interactive): signals_teardown_interactive()

4) Child processes (executor)
   - src/executor/executor.c
     • In forked children: signal(SIGINT, SIG_DFL); signal(SIGQUIT, SIG_DFL);
       so programs receive default behavior
     • If heredoc or redirection handling indicates cancelation (130), child exits 130

5) Heredoc cancelation (quality-of-life, typical for minishell)
   - include/executor.h
     • write_heredoc_lines(...) now returns int (0 ok, 130 canceled)
     • handle_redirections_heredoc(...) returns int (propagates 130)
     • handle_redirections(...) and handle_redirections_and_quotes(...) return int
   - src/executor/redir_utils2.c
     • write_heredoc_lines: returns 130 when readline returns NULL (likely SIGINT)
   - src/executor/redir_utils.c
     • handle_redirections_heredoc: returns 130 on cancel; otherwise redirects stdin from temp
     • handle_redirections: propagates 130 to caller to skip execution
   - src/executor/executor_utils.c
     • handle_redirections_and_quotes: propagates cancelation code
   - src/executor/executor.c
     • Child: if handle_redirections_and_quotes(...) == 130 then exit(130)
     • Parent-builtin: skip execution and set status to 130


Behavior Summary vs Subject
---------------------------
Interactive parent:
  - ctrl-C: prints a newline; current input line is cleared; new prompt is shown
  - ctrl-\: ignored (no output); prompt remains
  - ctrl-D: exits shell (we also print "exit" once before terminating)

Children:
  - Receive default signals; when killed by SIGINT the exit status becomes 130

Heredoc (additional but safe):
  - ctrl-C cancels heredoc collection, exit status becomes 130, command is not executed


Manual Test Commands
--------------------
Build first:
  make

Run interactive shell:
  ./minishell

1) ctrl-C at empty prompt
   - Press ctrl-C
   - Expected: a blank new line then a fresh prompt; no backtrace or exit

2) ctrl-\ at empty prompt
   - Press ctrl-\
   - Expected: nothing happens (no "Quit" message, no ^\ echo), prompt remains

3) ctrl-D at empty prompt
   - Press ctrl-D
   - Expected: shell prints "exit" and terminates

4) SIGINT delivered to a running child
   - Command: sleep 10
   - While it runs, press ctrl-C
   - Expected: sleep terminates, shell shows a fresh prompt; run: echo $?
     Result should be 130

5) SIGQUIT delivered to a running child (confirm parent ignores at prompt)
   - Command: cat
   - Press ctrl-\
   - Expected: child may terminate with SIGQUIT (depends on program); at prompt, ctrl-\ is ignored

6) Heredoc cancelation (if you want to test the extra behavior)
   - Type: cat << EOF
           (now press ctrl-C)
   - Expected: heredoc is canceled; command is not executed; run: echo $?
     Result should be 130


Notes
-----
• These tests require running minishell interactively in a terminal (TTY).
• Non-interactive runs (e.g., piping a script into minishell) are not suitable to test ctrl-C/ctrl-\ prompt behavior.
• ECHOCTL is disabled to avoid visual ^C/^\ sequences; this matches the subject's "does nothing" expectation for ctrl-\.


